Partie 1 : Approche pilotée par les tests (Test-Driven Development, TDD)

On utilise ici une définition réduite du TDD; il ne s'agit pas de "conception pilotée par les tests", étant donné
que l'architecture de la solution est une figure imposée dans cet exercice. Ici, c'est plutôt une approche de
"développement piloté par les tests".

Description des requis:

	Client
		Créer un nouveau client
			Valider que le nom d'utilisateur est renseigné
			Vérifier que le nom n'est pas déjà utilisé par un autre client
			Ajouter le client

		Renommer un client
			Valider que le nom d'utilisateur est renseigné
			Valider que le client existe
			Vérifier que le nom a changé
			Vérifier que le nom n'est pas déjà utilisé par un autre client
			Modifier le nom de l'utilisateur

	Livre
		Acheter un livre
			Valider que le client existe
			Valider que le montant payé est supérieur à 0
			Valider que le livre existe
			Vérifier qu'il reste au moins un exemplaire
			Valider que le montant payé est égal ou supérieur au prix du livre
			Réduire la quantité d'exemplaires du livre disponibles à la vente
			Ajouter un exemplaire vendu du livre au client
			Retourner le montant de la monnaie à rendre suite à l'achat du livre

		Rembourser un livre
			Valider que le client existe
			Valider que le client a déjà acheté au moins un exemplaire du livre
			Valider que le livre existe
			Ajuster la quantité d'exemplaires du livre disponibles à la vente
			Supprimer un exemplaire vendu du livre au client
			Retourner le montant du prix du livre remboursé

Contenu inclus:
	- Entité Client
	- Entité Livre
	- Interface du service de base de données, du service Client et du service Livre


Ce qui doit être fait:
	1. Créer un Service Client avec ses tests unitaires
	2. Créer un Service Livre avec ses tests unitaires
	3. S'assurer que les tests couvrent tous les requis ci-haut (validation par assertions).


Particularités
	- La structure des entités Client et Livre ne doit pas être changée
	- Le service de base de données n'a pas à être codé; c'est inutile pour cet exercice
	- Les interfaces des services de base de données, Client et Livre ne doivent pas être changées
	- Le framework de test et la composante de mock sont à votre choix

---

Partie 2 : Ré-usinage (Refactoring)
Contenu inclus:
	- Entité Collaborateur
	- Entité Question

Ce qui doit être fait:
	1. Écrire une définition du ré-usinage du code en spécifiant quelques objectifs. (Répondre ci-dessous ou dans un fichier à part)
	2. Modifier la classe Collaborateur et sa relation avec Question pour l'utiliser en injection de dépendance.
	3. Faire du ré-usinage pour améliorer la classe Question et corriger tous les problèmes.

Particularités
	- Tout en suivant les principes de ré-usinage, n'hésitez pas à être créatif
	- Vous pouvez créer d'autres fichiers si nécessaire

Avant de commencer, répondre cette question: quelle est la définition du ré-usinage (refactoring)?
	
---

Question bonus :

Quelle amélioration devrait être implantée afin de s'assurer que les comptes de quantités demeurent
intègres tant pour les livres en inventaire disponibles à la vente, que les exemplaires vendus aux
clients, en cas de problème technique, entre les deux ajustements dans les fonctions suivantes?

NOTE: Pas nécessaire de l'implémenter, seulement fournir votre réponse plus bas ou dans un fichier à part.

	Acheter un livre
		Réduire la quantité d'exemplaires du livre disponibles à la vente
		Ajouter un exemplaire vendu du livre au client

	Rembourser un livre
		Ajuster la quantité d'exemplaires du livre disponibles à la vente
		Supprimer un exemplaire vendu du livre au client

Réponse:

RÉPONSES ET BONUS
Définition du Ré-Usinage
Le ré-usinage est le processus de restructuration du code source d'une application sans modifier son comportement externe. Son objectif est d'améliorer la lisibilité, la maintenabilité et la performance du code sans introduire de nouveaux bugs. Ce processus consiste souvent à simplifier les structures de code, réduire la redondance, améliorer les noms de variables et appliquer des principes de conception pour une meilleure modularité.

Objectifs du Ré-Usinage
Améliorer la Lisibilité : Rendre le code plus compréhensible pour les développeurs, ce qui facilite la maintenance et de futures modifications.
Réduire la Redondance : Supprimer les duplications de code pour minimiser les risques d’erreurs et faciliter les mises à jour.
Optimiser la Performance : Identifier les goulots d’étranglement et restructurer le code pour une meilleure efficacité.
Suivre les Bonnes Pratiques : Appliquer les principes SOLID, SRP, et autres bonnes pratiques pour assurer la qualité du code.
Réponse à la Question Bonus
Pour garantir l'intégrité des comptes de quantités lors des ajustements pour les fonctions AcheterLivre et RembourserLivre, une transaction atomique devrait être utilisée. En cas de problème technique, les deux ajustements (réduction ou augmentation de la quantité de livres disponibles et d'exemplaires pour le client) seraient exécutés comme une seule unité de travail. Une transaction atomique suit un concept de base de données et de programmation qui garantit qu'un ensemble d'opérations est traité comme une unité indivisible. Cela signifie que toutes les opérations incluses dans la transaction réussissent ou échouent ensemble. Si une erreur survient au cours d'une transaction, toutes les opérations sont annulées, et l'état initial est restauré, assurant ainsi l'intégrité des données. Autrement dit, toutes les opérations doivent réussir pour que la transaction soit validée, les opérations en cours sont isolées des autres transactions, évitant les interférences et garantissant que le résultat final est indépendant des transactions simultanées. Une fois la transaction validée les changements sont permanents, même en cas de panne, autrement on parlera de "rollback".

Exemple appliqué à la Partie Bonus
Dans le contexte de l'achat et du remboursement d'un livre, une transaction atomique garantirait que :

Lors de l'achat d'un livre : La réduction de la quantité de livres disponibles à la vente et l'ajout de l'exemplaire au compte du client sont traités comme une seule opération. Si l'une de ces étapes échoue, les deux actions vont être annulées.

Lors du remboursement : L'ajustement de la quantité de livres disponibles et la suppression de l'exemplaire vendu du compte client se produisent ensemble. En cas de problème, aucun changement n'est appliqué. Cela permet d'éviter des incohérences de données (par exemple, des exemplaires qui manquent en inventaire sans qu'ils aient été attribués à un client).

Cela pourrait être réalisé avec : Une transaction de base de données (si les opérations sont stockées en base de données). Un bloc transactionnel dans le code pour s'assurer que les ajustements se font ensemble ou pas du tout, réduisant ainsi le risque d'incohérences.